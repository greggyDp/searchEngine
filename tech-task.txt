Необходимо разработать универсальный класс поиска пользователей. На входе передаются фильтры поиска в определенном вами формате. На выходе возвращается массив данных найденных пользователей с данными "users.id", "users.email", "users.role", "users.reg_date". Должна быть возможность комбинировать фильтры в логические конструкции И/ИЛИ. Для каждого фильтра необходимо добавить возможность указывать соответствие (=) или несоответствие (!=) целевому значению. Вложенность логических конструкций должна быть бесконечна. Должна быть возможность расширения списка фильтров без изменения основного алгоритма поиска.

Должна быть возможность комбинирования любых фильтров с любыми логическими операторами.

Имеется две таблицы с данными (структура таблиц представлена ниже):
users - список пользователей
users_about - данные пользователей

Необходимо реализовать фильтры:
ID (users.id)
E-Mail (users.email)
Страна (users_about.item = "country")
Имя (users_about.item = "firstname")
Состояние пользователя (users_about.item = "state")

Примеры

Должна быть возможность составлять такие условия поиска как:
- ((ID = 1000) ИЛИ (Страна != Россия))
- ((Страна = Россия) И (Состояние пользователя != active) И (Граватар = Нет))
- ((((Страна != Россия) ИЛИ (Состояние пользователя = active)) И (E-Mail = user@domain.com)) ИЛИ (Имя != ""))

Выполнить эту задачу необходимо на Symfony 4. Все данные должны находиться в БД MySQL. Необходимо предоставить описание формата передачи фильтров в поиск и реализация фильтров из примера.

Структура таблиц

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `email` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `role` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `reg_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_visit` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email` (`email`) USING BTREE,
  ADD KEY `email_password` (`email`,`password`) USING BTREE,
  ADD KEY `role_reg_date` (`role`,`reg_date`) USING BTREE;

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;COMMIT;

--------------------------------------------------------------

--
-- Структура таблицы `users_about`
--

CREATE TABLE `users_about` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `user` int(10) UNSIGNED NOT NULL,
  `item` enum('country','firstname','state') COLLATE utf8_unicode_ci NOT NULL,
  `value` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `up_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `users_about`
--
ALTER TABLE `users_about`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user` (`user`),
  ADD KEY `user_item_value` (`user`,`item`,`value`) USING BTREE,
  ADD KEY `item` (`item`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `users_about`
--
ALTER TABLE `users_about`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `users_about`
--
ALTER TABLE `users_about`
  ADD CONSTRAINT `users_about_ibfk_1` FOREIGN KEY (`user`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;